{
  parserClass="com.rawatech.parser.VHDLParser"

  psiClassPrefix="VHDL"
  psiImplClassSuffix="Impl"
  psiPackage="com.rawatech.psi"
  psiImplPackage="com.rawatech.psi.impl"

  elementTypeHolderClass="com.rawatech.psi.VHDLTypes"
  elementTypeClass="com.rawatech.psi.VHDLElementType"
  tokenTypeClass="com.rawatech.psi.VHDLTokenType"

  psiImplUtilClass="com.rawatech.psi.impl.VHDLPsiImplUtil"

  tokens = [
          LOWERCASE_RE='regexp:[a-z]*'
          UPPERCASE_RE='regexp:[A-Z]*'
          DIGIT_RE='regexp:[0-9]+'
          WHITE_SPACE = 'regexp:\s+'
          COMMENT = 'regexp:--.*'
          DOT = '.'
          COMMA = ','
          COLON = ':'
          COLONEQUALS = ':='
          SEMICOLON =';'
          PLUS = '+'
          MINUS = '-'
          SPACE = ' '
          AMPERSAND = '&'
          BACKSLASH = '\'
          UNDERLINE = '_'
          HASH = '#'
          QUOTE = "'"
          RARROW = '=>'
          LARROW = '<='
          STARSTAR = '**'
          RELATIONAL_OPERATOR_RE = 'regexp:=|/=|<|<=|>|>='
          EQUALS='='
          SIGN_RE = 'regexp:[+\-]'
          MULTIPLYING_OPERATOR_RE='regexp:\*|/|mod|rem'
          RANGE_RE='<>'
          PIPE='|'
          DQUOTE='"'
          PARLEFT='('
          PARRIGHT=')'
          SPECIAL_RE='regexp:[!@#$%^&*()\[\]+]*'
      ]
}


VHDLFile ::= design_file



variable_name ::= nameelem
signal_name ::= nameelem
function_name ::= nameelem
entity_name ::= nameelem
architecture_simple_name ::= simple_name
attribute_simple_name ::= simple_name
static_expression ::= expression
architecture_name ::= nameelem
block_statement_label ::= labelelem
generate_statement_label ::= labelelem
block_label ::= labelelem
element_simple_name ::= simple_name
local_generic_clause ::= generic_clause
local_port_clause ::= port_clause
instantiation_label ::= labelelem
component_name ::= nameelem
boolean_expression ::= expression
configuration_simple_name ::= simple_name
element_subtype_indication ::= subtype_indication
time_expression ::= expression
discrete_subtype_indication ::= subtype_indication
architecture_identifier ::= identifier
parameter_association_list ::= association_list
configuration_name ::= nameelem
entity_simple_name ::= simple_name
formal_generic_clause ::= generic_clause
formal_port_clause ::= port_clause
passive_concurrent_procedure_call ::= concurrent_procedure_call
passive_process_statement ::= process_statement
loop_label ::= labelelem
string_expression ::= expression
generic_name ::= nameelem
port_name ::= nameelem
parameter_name ::= nameelem
parameter_interface_list ::= interface_list
generate_label ::= labelelem
generate_parameter_specification ::= parameter_specification
generic_interface_list ::= interface_list
generic_association_list ::= association_list
guarded_signal_list ::= signal_list
package_simple_name ::= simple_name
unit_name ::= nameelem
port_interface_list ::= interface_list
port_association_list ::= association_list
procedure_name ::= nameelem
process_label ::= labelelem
range_attribute_name ::= attribute_name
resolution_function_name ::= nameelem
type_name ::= nameelem
subtype_name ::= nameelem
value_expression ::= expression
loop_parameter_specification ::= parameter_specification

abstract_literal ::= decimal_literal | based_literal

access_type_definition ::= ACCESS subtype_indication

actual_designator ::=
	expression
	| signal_name
	| variable_name
	| file_name
	| OPEN

actual_parameter_part ::= parameter_association_list

actual_part ::=
	actual_designator
	| function_name PARLEFT actual_designator PARRIGHT
	| type_mark PARLEFT actual_designator PARRIGHT

adding_operator ::= PLUS | MINUS  | AMPERSAND

aggregate ::=
    PARLEFT element_association ( COMMA element_association )* PARRIGHT

alias_declaration ::=
	ALIAS alias_designator [ COLON subtype_indication ] IS nameelem [ signature ] 	SEMICOLON

alias_designator ::= identifier | character_literal | operator_symbol

allocator ::=
	NEW subtype_indication
	| NEW qualified_expression

architecture_body ::=
	ARCHITECTURE identifier OF entity_name IS
		architecture_declarative_part
	BEGIN
		architecture_statement_part
	END [ ARCHITECTURE ] [ architecture_simple_name ] SEMICOLON

architecture_declarative_part ::=
    (block_declarative_item )*

architecture_statement_part ::=
    ( concurrent_statement )*

array_type_definition ::=
    unconstrained_array_definition | constrained_array_definition

assertion ::=
	ASSERT condition
		[ REPORT expression ]
		[ SEVERITY expression ]

assertion_statement ::=	 [ label COLON ] assertion SEMICOLON

association_element ::=
	[ formal_part RARROW ] actual_part

association_list ::=
    association_element ( COMMA association_element )*

attribute_declaration ::=
	ATTRIBUTE identifier COLON type_mark SEMICOLON

attribute_designator ::= attribute_simple_name

attribute_name ::=
	prefix [ signature ] QUOTE attribute_designator [ PARLEFT expression PARRIGHT ]

attribute_specification ::=
	ATTRIBUTE attribute_designator OF entity_specification IS expression SEMICOLON

base ::= integer

base_specifier ::=  B | O | X

base_unit_declaration ::= identifier SEMICOLON

based_integer ::=
	extended_digit ( [ underline ] extended_digit )*

based_literal ::=
	base HASH based_integer [ DOT based_integer ] HASH [ exponent ]

basic_character ::=
	basic_graphic_character | format_effector

basic_graphic_character ::=
	UPPERCASE_RE | DIGIT_RE | SPECIAL_RE| SPACE | QUOTE

basic_identifier ::=
	letter ( [ UNDERLINE ] letter_or_digit )*

binding_indication ::=
	[ USE entity_aspect ]
	[ generic_map_aspect ]
	[ port_map_aspect ]

bit_string_literal ::=	base_specifier DQUOTE bit_value DQUOTE

bit_value ::= extended_digit ( [ UNDERLINE ] extended_digit )*

block_configuration ::=
	FOR block_specification
		( use_clause )*
		( configuration_item )*
	END FOR SEMICOLON

block_declarative_item ::=
	subprogram_declaration
	| subprogram_body
	| type_declaration
	| subtype_declaration
	| constant_declaration
	| signal_declaration
	| shared_variable_declaration
	| file_declaration
	| alias_declaration
	| component_declaration
	| attribute_declaration
	| attribute_specification
	| configuration_specification
	| disconnection_specification
	| use_clause
	| group_template_declaration
	| group_declaration

block_declarative_part ::=
	( block_declarative_item )*

block_header ::=
	[ generic_clause
	[ generic_map_aspect SEMICOLON ] ]
	[ port_clause
	[ port_map_aspect SEMICOLON ] ]

block_specification ::=
	architecture_name
	| block_statement_label
	| generate_statement_label [ PARLEFT index_specification PARRIGHT ]

block_statement ::=
	block_label COLON
		BLOCK [ PARLEFT guard_expression PARRIGHT ] [ IS ]
			block_header
			block_declarative_part
		BEGIN
			block_statement_part
		END BLOCK [ block_label ] SEMICOLON

block_statement_part ::=
	( concurrent_statement )*

case_statement ::=
	[ case_label COLON ]
		CASE expression IS
			case_statement_alternative
			( case_statement_alternative )*
		END CASE [ case_label ] SEMICOLON

case_statement_alternative ::=
	WHEN choices RARROW
		sequence_of_statements

character_literal ::= QUOTE graphic_character QUOTE

choice ::=
	simple_expression
	| discrete_range
	| element_simple_name
	| OTHERS

choices ::= choice ( | choice )*

component_configuration ::=
	FOR component_specification
		[ binding_indication SEMICOLON ]
		[ block_configuration ]
	END FOR SEMICOLON

component_declaration ::=
	COMPONENT identifier [ IS ]
		[ local_generic_clause ]
		[ local_port_clause ]
	END COMPONENT [ component_simple_name ] SEMICOLON

component_instantiation_statement ::=
	instantiation_label COLON
		instantiated_unit
			[ generic_map_aspect ]
			[ port_map_aspect ] SEMICOLON

component_specification ::=
	instantiation_list COLON component_name

composite_type_definition ::=
	array_type_definition
	| record_type_definition

concurrent_assertion_statement ::=
	[ label COLON ] [ POSTPONED ] assertion SEMICOLON

concurrent_procedure_call_statement ::=
	[ label COLON ] [ POSTPONED ] procedure_call SEMICOLON

concurrent_signal_assignment_statement ::=
	  [ label COLON ] [ POSTPONED ] conditional_signal_assignment
	| [ label COLON ] [ POSTPONED ] selected_signal_assignment

concurrent_statement ::=
	block_statement
	| process_statement
	| concurrent_procedure_call_statement
	| concurrent_assertion_statement
	| concurrent_signal_assignment_statement
	| component_instantiation_statement
	| generate_statement

condition ::= boolean_expression

condition_clause ::= UNTIL condition

conditional_signal_assignment ::=
	target	LARROW options conditional_waveforms SEMICOLON

conditional_waveforms ::=
	( waveform WHEN condition ELSE )*
	waveform [ WHEN condition ]

configuration_declaration ::=
	CONFIGURATION identifier OF entity_name IS
		configuration_declarative_part
		block_configuration
	END [ CONFIGURATION ] [ configuration_simple_name ] SEMICOLON

configuration_declarative_item ::=
	use_clause
	| attribute_specification
	| group_declaration

configuration_declarative_part ::=
	( configuration_declarative_item )*

configuration_item ::=
	block_configuration
	| component_configuration

configuration_specification ::=
	FOR component_specification binding_indication SEMICOLON

constant_declaration ::=
	CONSTANT identifier_list COLON subtype_indication [ COLONEQUALS expression ] SEMICOLON

constrained_array_definition ::=
	ARRAY index_constraint OF element_subtype_indication

constraint ::=
	range_constraint
	| index_constraint

context_clause ::= ( context_item )*

context_item ::=
	library_clause
	| use_clause

decimal_literal ::= integer [ DOT integer ] [ exponent ]

declaration ::=
	type_declaration
	| subtype_declaration
	| object_declaration
	| interface_declaration
	| alias_declaration
	| attribute_declaration
	| component_declaration
	| group_template_declaration
	| group_declaration
	| entity_declaration
	| configuration_declaration
	| subprogram_declaration
	| package_declaration

delay_mechanism ::=
	TRANSPORT
	| [ REJECT time_expression ] INERTIAL

design_file ::= design_unit ( design_unit )*

design_unit ::= context_clause library_unit

designator ::= identifier  |  operator_symbol

direction ::= TO | DOWNTO

disconnection_specification ::=
	DISCONNECT guarded_signal_specification AFTER time_expression SEMICOLON

discrete_range ::= discrete_subtype_indication | range

element_association ::=
	[ choices RARROW ] expression

element_declaration ::=
	identifier_list COLON element_subtype_definition SEMICOLON

element_subtype_definition ::= subtype_indication

entity_aspect ::=
	  ENTITY entity_name [ PARLEFT architecture_identifierPARRIGHT ]
	| CONFIGURATION configuration_name
	| OPEN

entity_class ::=
	ENTITY	     | ARCHITECTURE  | CONFIGURATION
	| PROCEDURE  | FUNCTION	     | PACKAGE
	| TYPE	     | SUBTYPE	     | CONSTANT
	| SIGNAL     | VARIABLE	     | COMPONENT
	| LABEL	     | LITERAL	     | UNITS
	| GROUP	     | FILE

entity_class_entry ::=	entity_class [ RANGE_RE ]

entity_class_entry_list ::=
	entity_class_entry ( COMMA entity_class_entry )*

entity_declaration ::=
	ENTITY identifier IS
		entity_header
		entity_declarative_part
      [ BEGIN
		entity_statement_part ]
	END [ ENTITY ] [ entity_simple_name ] SEMICOLON

entity_declarative_item ::=
	subprogram_declaration
	| subprogram_body
	| type_declaration
	| subtype_declaration
	| constant_declaration
	| signal_declaration
	| shared_variable_declaration
	| file_declaration
	| alias_declaration
	| attribute_declaration
	| attribute_specification
	| disconnection_specification
	| use_clause
	| group_template_declaration
	| group_declaration

entity_declarative_part ::=
	( entity_declarative_item )*

entity_designator ::= entity_tag [ signature ]

entity_header ::=
	[ formal_generic_clause ]
	[ formal_port_clause ]

entity_name_list ::=
	entity_designator ( COMMA entity_designator )*
	| OTHERS
	| ALL

entity_specification ::=
	entity_name_list COLON entity_class

entity_statement ::=
	concurrent_assertion_statement
	| passive_concurrent_procedure_call_statement
	| passive_process_statement

entity_statement_part ::=
	( entity_statement )*

entity_tag ::=	simple_name | character_literal | operator_symbol

enumeration_literal ::= identifier | character_literal

enumeration_type_definition ::=
	PARLEFT enumeration_literal ( COMMA enumeration_literal )* PARRIGHT

exit_statement ::=
	[ label COLON ] EXIT [ loop_label ] [ WHEN condition ] SEMICOLON


exponent ::= E [ PLUS ] integer | E MINUS integer

expression ::=
	  relation ( AND relation )*
	| relation ( OR relation )*
	| relation ( XOR relation )*
	| relation [ NAND relation ]
	| relation [ NOR relation ]
	| relation ( XNOR relation )*

extended_digit ::= digit | letter

extended_identifier ::=
	BACKSLASH graphic_character ( graphic_character )* BACKSLASH

factor ::=
	primary [ STARSTAR primary ]
	| ABS primary
	| NOT primary

file_declaration ::=
	FILE identifier_list COLON subtype_indication file_open_information  SEMICOLON

file_logical_name ::= string_expression

file_open_information ::=
	[ OPEN file_open_kind_expression ] IS file_logical_name

file_type_definition ::=
	FILE  OF type_mark

floating_type_definition ::=  range_constraint

formal_designator ::=
	generic_name
	| port_name
	| parameter_name

formal_parameter_list ::= parameter_interface_list

formal_part ::=
	formal_designator
	| function_name PARLEFT formal_designator PARRIGHT
	| type_mark PARLEFT formal_designator PARRIGHT

full_type_declaration ::=
	TYPE identifier IS type_definition SEMICOLON

function_call ::=
	function_name [ PARLEFT actual_parameter_part PARRIGHT ]

generate_statement ::=
	generate_label COLON
		generation_scheme GENERATE
			[ ( block_declarative_item )*
		BEGIN ]
			( concurrent_statement )*
		END GENERATE [ generate_label ] SEMICOLON

generation_scheme ::=
	FOR generate_parameter_specification
	| IF condition

generic_clause ::=
	GENERIC PARLEFT generic_list PARRIGHT SEMICOLON

generic_list ::= generic_interface_list

generic_map_aspect ::=
	GENERIC MAP PARLEFT generic_association_list PARRIGHT

graphic_character ::=
	basic_graphic_character	 | lower_case_letter | other_special_character

group_constituent ::= nameelem | character_literal

group_constituent_list ::= group_constituent ( COMMA group_constituent )*

group_template_declaration ::=
	GROUP identifier IS PARLEFT entity_class_entry_list PARRIGHT SEMICOLON

group_declaration ::=
	GROUP identifier COLON group_template_name PARLEFT group_constituent_list PARRIGHT SEMICOLON

guarded_signal_specification ::=
	guarded_signal_list COLON type_mark

identifier ::=
	basic_identifier | extended_identifier

identifier_list ::= identifier ( COMMA identifier )*

if_statement ::=
	[ if_label COLON ]
		IF condition THEN
			sequence_of_statements
		{ ELSIF condition THEN
			sequence_of_statements }
		[ ELSE
			sequence_of_statements ]
		END IF [ if_label ] SEMICOLON

incomplete_type_declaration ::=	 TYPE identifier SEMICOLON

index_constraint ::= PARLEFT discrete_range ( COMMA discrete_range )* PARRIGHT

index_specification ::=
	discrete_range
	| static_expression

index_subtype_definition ::= type_mark range RANGE_RE

indexed_name ::= prefix PARLEFT expression ( COMMA expression )* PARRIGHT

instantiated_unit ::=
	[ COMPONENT ] component_name
	| ENTITY entity_name [ PARLEFT architecture_identifier PARRIGHT ]
	| CONFIGURATION configuration_name

instantiation_list ::=
	instantiation_label ( COMMA instantiation_label )*
	| OTHERS
	| ALL

integer ::= DIGIT_RE ( [ UNDERLINE ] DIGIT_RE )*

integer_type_definition ::= range_constraint

interface_constant_declaration ::=
	[ CONSTANT ] identifier_list COLON [ IN ] subtype_indication [ COLONEQUALS static_expression ]

interface_declaration ::=
	interface_constant_declaration
	| interface_signal_declaration
	| interface_variable_declaration
	| interface_file_declaration

interface_element ::= interface_declaration

interface_file_declaration ::=
	FILE identifier_list COLON subtype_indication

interface_list ::=
	interface_element ( SEMICOLON interface_element )*

interface_signal_declaration ::=
	[SIGNAL] identifier_list COLON [ mode ] subtype_indication [ BUS ] [ COLONEQUALS static_expression ]

interface_variable_declaration ::=
	[VARIABLE] identifier_list COLON [ mode ] subtype_indication [ COLONEQUALS static_expression ]

iteration_scheme ::=
	WHILE condition
	| FOR loop_parameter_specification

label ::= identifier

letter ::= UPPERCASE_RE | LOWERCASE_RE

letter_or_digit ::= letter | DIGIT_RE

library_clause ::= LIBRARY logical_name_list SEMICOLON

library_unit ::=
	primary_unit
	| secondary_unit

literal ::=
	numeric_literal
	| enumeration_literal
	| string_literal
	| bit_string_literal
	| NULL

logical_name ::= identifier

logical_name_list ::= logical_name ( COMMA logical_name )*

logical_operator ::= AND | OR | NAND | NOR | XOR | XNOR

loop_statement ::=
	[ loop_label COLON ]
		[ iteration_scheme ] LOOP
			sequence_of_statements
		END LOOP [ loop_label ] SEMICOLON

miscellaneous_operator ::= STARSTAR | ABS | NOT

mode ::= IN | OUT | INOUT | BUFFER | LINKAGE

multiplying_operator ::= MULTIPLYING_OPERATOR_RE

nameelem ::=
	simple_name
	| operator_symbol
	| selected_name
	| indexed_name
	| slice_name
	| attribute_name

next_statement ::=
	[ label COLON ] NEXT [ loop_label ] [ WHEN condition ] SEMICOLON

null_statement ::= [ label COLON ] NULL SEMICOLON

numeric_literal ::=
	abstract_literal
	| physical_literal

object_declaration ::=
	constant_declaration
	| signal_declaration
	| variable_declaration
	| file_declaration

operator_symbol ::= string_literal

options ::= [ GUARDED ] [ delay_mechanism ]

package_body ::=
	PACKAGE body package_simple_name IS
		package_body_declarative_part
	END [ PACKAGE BODY ] [ package_simple_name ] SEMICOLON

package_body_declarative_item ::=
	subprogram_declaration
	| subprogram_body
	| type_declaration
	| subtype_declaration
	| constant_declaration
	| shared_variable_declaration
	| file_declaration
	| alias_declaration
	| use_clause
	| group_template_declaration
	| group_declaration

package_body_declarative_part ::=
	( package_body_declarative_item )*

package_declaration ::=
	PACKAGE identifier IS
		package_declarative_part
	END [ PACKAGE ] [ package_simple_name ] SEMICOLON

package_declarative_item ::=
	subprogram_declaration
	| type_declaration
	| subtype_declaration
	| constant_declaration
	| signal_declaration
	| shared_variable_declaration
	| file_declaration
	| alias_declaration
	| component_declaration
	| attribute_declaration
	| attribute_specification
	| disconnection_specification
	| use_clause
	| group_template_declaration
	| group_declaration

package_declarative_part ::=
	( package_declarative_item )*

parameter_specification ::=
	identifier IN discrete_range

physical_literal ::= [ abstract_literal ] unit_name

physical_type_definition ::=
	range_constraint
		UNITS
			base_unit_declaration
			( secondary_unit_declaration )*
		END UNITS [ physical_type_simple_name ]

port_clause ::=
	PORT PARLEFT port_list PARRIGHT SEMICOLON

port_list ::= port_interface_list

port_map_aspect ::=
	PORT MAP PARLEFT port_association_list PARRIGHT

prefix ::=
	nameelem
	| function_call

primary ::=
	nameelem
	| literal
	| aggregate
	| function_call
	| qualified_expression
	| type_conversion
	| allocator
	| PARLEFT expression PARRIGHT

primary_unit ::=
	entity_declaration
	| configuration_declaration
	| package_declaration

procedure_call ::= procedure_name [ PARLEFT actual_parameter_part PARRIGHT ]

procedure_call_statement ::=
	[ label COLON ] procedure_call SEMICOLON

process_declarative_item ::=
	subprogram_declaration
	| subprogram_body
	| type_declaration
	| subtype_declaration
	| constant_declaration
	| variable_declaration
	| file_declaration
	| alias_declaration
	| attribute_declaration
	| attribute_specification
	| use_clause
	| group_template_declaration
	| group_declaration

process_declarative_part ::=
	( process_declarative_item )*

process_statement ::=
	[ process_label COLON ]
		[ POSTPONED ] PROCESS [ PARLEFT sensitivity_list PARRIGHT ] [ IS ]
			process_declarative_part
		BEGIN
			process_statement_part
		END [ POSTPONED ] PROCESS [ process_label ] SEMICOLON

process_statement_part ::=
	( sequential_statement )*

qualified_expression ::=
	type_mark QUOTE PARLEFT expression PARRIGHT
	| type_mark QUOTE aggregate

range ::=
	range_attribute_name
	| simple_expression direction simple_expression

range_constraint ::= range range

record_type_definition ::=
	RECORD
		element_declaration
		( element_declaration )*
	END RECORD [ record_type_simple_name ]

relation ::=
	shift_expression [ relational_operator shift_expression ]

relational_operator ::=	 RELATIONAL_OPERATOR_RE

report_statement ::=
	[ label COLON ]
		REPORT expression
			[ SEVERITY expression ] SEMICOLON

return_statement ::=
	[ label COLON ] RETURN [ expression ] SEMICOLON

scalar_type_definition ::=
	enumeration_type_definition   | integer_type_definition
	| floating_type_definition	  | physical_type_definition

secondary_unit ::=
	architecture_body
	| package_body

secondary_unit_declaration ::=	identifier EQUALS physical_literal SEMICOLON

selected_name ::= ( prefix DOT)* suffix

selected_signal_assignment ::=
	WITH expression SELECT
		target	LARROW options selected_waveforms SEMICOLON

selected_waveforms ::=
	( waveform WHEN choices COMMA )*
	waveform WHEN choices

sensitivity_clause ::=	ON sensitivity_list

sensitivity_list ::= signal_name ( COMMA signal_name )*

sequence_of_statements ::=
	( sequential_statement )*

sequential_statement ::=
	wait_statement
	| assertion_statement
	| report_statement
	| signal_assignment_statement
	| variable_assignment_statement
	| procedure_call_statement
	| if_statement
	| case_statement
	| loop_statement
	| next_statement
	| exit_statement
	| return_statement
	| null_statement

shift_expression ::=
	simple_expression [ shift_operator simple_expression ]

shift_operator ::= SLL | SRL | SLA | SRA | ROL | ROR

sign ::= SIGN_RE

signal_assignment_statement ::=
	[ label COLON ] target LARROW [ delay_mechanism ] waveform SEMICOLON

signal_declaration ::=
	signal identifier_list COLON subtype_indication [ signal_kind ] [ COLONEQUALS expression ] SEMICOLON

signal_kind ::=	 REGISTER  |  BUS

signal_list ::=
	signal_name ( COMMA signal_name )*
	| OTHERS
	| ALL

signature ::= [ [ type_mark ( COMMA type_mark )* ] [ return type_mark ] ]

simple_expression ::=
	[ sign ] term ( adding_operator term )*

simple_name ::=	 identifier

slice_name ::=	prefix PARLEFT discrete_range PARRIGHT

string_literal ::= " ( graphic_character )* "

subprogram_body ::=
	subprogram_specification IS
		subprogram_declarative_part
	BEGIN
		subprogram_statement_part
	END [ subprogram_kind ] [ designator ] SEMICOLON

subprogram_declaration ::=
	subprogram_specification SEMICOLON

subprogram_declarative_item ::=
	subprogram_declaration
	| subprogram_body
	| type_declaration
	| subtype_declaration
	| constant_declaration
	| variable_declaration
	| file_declaration
	| alias_declaration
	| attribute_declaration
	| attribute_specification
	| use_clause
	| group_template_declaration
	| group_declaration

subprogram_declarative_part ::=
	( subprogram_declarative_item )*

subprogram_kind ::= PROCEDURE | FUNCTION

subprogram_specification ::=
	PROCEDURE designator [ PARLEFT formal_parameter_list PARRIGHT ]
	| [ PURE | IMPURE ]  FUNCTION designator [ PARLEFT formal_parameter_list PARRIGHT ]
		RETURN type_mark

subprogram_statement_part ::=
	( sequential_statement )*

subtype_declaration ::=
	SUBTYPE identifier IS subtype_indication SEMICOLON

subtype_indication ::=
	//[ resolution_function_name ] type_mark [ constraint ]
	type_mark [ constraint ]

suffix ::=
	simple_name
	| character_literal
	| operator_symbol
	| ALL

target ::=
	nameelem
	| aggregate

term ::=
	factor ( multiplying_operator factor )*

timeout_clause ::= FOR time_expression

type_conversion ::= type_mark PARLEFT expression PARRIGHT

type_declaration ::=
	full_type_declaration
	| incomplete_type_declaration

type_definition ::=
	scalar_type_definition
	| composite_type_definition
	| access_type_definition
	| file_type_definition

type_mark ::=
	type_name
	| subtype_name

unconstrained_array_definition ::=
	ARRAY PARLEFT index_subtype_definition ( COMMA index_subtype_definition )* PARRIGHT
		OF element_subtype_indication

use_clause ::=
	USE selected_name ( COMMA selected_name )* SEMICOLON

variable_assignment_statement ::=
	[ label COLON ] target  COLONEQUALS expression SEMICOLON

variable_declaration ::=
	[ SHARED ] VARIABLE identifier_list COLON subtype_indication [ COLONEQUALS expression ] SEMICOLON

wait_statement ::=
	[ label COLON ] WAIT [ sensitivity_clause ] [ condition_clause ] [ timeout_clause ] SEMICOLON

waveform ::=
	waveform_element ( COMMA waveform_element )*
	| UNAFFECTED

waveform_element ::=
	value_expression [ AFTER time_expression ]
	| NULL [ AFTER time_expression ]