/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.rawatech.grammar;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.rawatech.psi.VHDLTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_VHDLLexer.flex</tt>
 */
public class _VHDLLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\6\4\2\22\0\1\6\1\0\1\35\1\32\2\0\1\10\1\33\2\0\1\16\1\15\1\25\1\7"+
    "\1\24\1\12\12\5\1\26\1\27\1\13\1\11\1\14\2\0\1\70\1\56\1\67\1\4\1\63\6\4\1"+
    "\64\2\4\1\57\2\4\1\66\1\71\3\4\1\65\1\60\2\4\1\0\1\30\2\0\1\31\1\0\1\36\1"+
    "\52\1\37\1\21\1\23\1\51\1\53\1\46\1\44\1\3\1\61\1\43\1\17\1\42\1\20\1\41\1"+
    "\3\1\22\1\40\1\47\1\50\1\54\1\45\1\62\1\55\1\3\1\0\1\34\10\0\1\1\242\0\2\1"+
    "\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\2\12\1\13\1\11\5\3\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\16\3\1\26\1\27\1\30\1\3\1\31\1\4\1\32"+
    "\1\33\1\12\1\34\1\35\1\36\1\3\1\37\1\3"+
    "\1\40\2\3\1\41\6\3\1\42\30\3\1\43\1\44"+
    "\1\45\3\3\1\46\20\3\1\4\1\47\2\3\1\50"+
    "\7\3\1\51\3\3\1\52\4\3\1\53\1\54\3\3"+
    "\1\55\12\3\1\56\1\57\1\60\17\3\1\61\2\3"+
    "\1\62\5\3\1\63\4\3\1\64\1\4\1\65\11\3"+
    "\1\66\1\3\1\67\12\3\1\70\4\3\1\71\2\3"+
    "\1\72\1\73\1\74\1\75\4\3\1\76\1\77\1\100"+
    "\2\3\1\101\1\102\3\3\1\103\1\3\1\104\6\3"+
    "\1\4\3\3\1\105\5\3\1\106\1\107\3\3\1\110"+
    "\1\3\1\111\11\3\1\112\2\3\1\113\1\114\1\3"+
    "\1\115\1\116\2\3\1\117\1\120\4\3\1\4\1\121"+
    "\1\122\1\3\1\123\1\124\1\125\1\3\1\126\1\3"+
    "\1\127\1\130\4\3\1\131\1\3\1\132\11\3\1\133"+
    "\4\3\1\0\10\3\1\134\1\3\1\135\1\136\1\137"+
    "\1\140\1\3\1\0\2\3\1\141\1\142\1\3\1\0"+
    "\1\3\1\143\3\3\1\144\1\3\1\145\2\3\1\0"+
    "\1\146\1\147\1\150\1\0\2\3\1\151\1\152\1\3"+
    "\1\153\1\154\2\0\1\155\2\3\2\0\2\3\2\0"+
    "\1\156\1\3\2\0\1\157\1\0\1\160\1\0\1\161";

  private static int [] zzUnpackAction() {
    int [] result = new int[386];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0196"+
    "\0\u01d0\0\u020a\0\u0244\0\u020a\0\u0196\0\u027e\0\u02b8\0\u02f2"+
    "\0\u032c\0\u0366\0\u03a0\0\72\0\72\0\u03da\0\72\0\72"+
    "\0\72\0\72\0\72\0\72\0\72\0\u0414\0\u044e\0\u0488"+
    "\0\u04c2\0\u04fc\0\u0536\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u0658"+
    "\0\u0692\0\u06cc\0\u0706\0\350\0\350\0\350\0\u0740\0\350"+
    "\0\u077a\0\u07b4\0\72\0\72\0\72\0\72\0\72\0\u07ee"+
    "\0\256\0\u0828\0\256\0\u0862\0\u089c\0\256\0\u08d6\0\u0910"+
    "\0\u094a\0\u0984\0\u09be\0\u09f8\0\72\0\u0a32\0\u0a6c\0\u0aa6"+
    "\0\u0ae0\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8\0\u0c02\0\u0c3c\0\u0c76"+
    "\0\u0cb0\0\u0cea\0\u0d24\0\u0d5e\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46"+
    "\0\u0e80\0\u0eba\0\u0ef4\0\u0f2e\0\u0f68\0\256\0\u0fa2\0\256"+
    "\0\u0fdc\0\u1016\0\u1050\0\256\0\u108a\0\u10c4\0\u10fe\0\u1138"+
    "\0\u1172\0\u11ac\0\u11e6\0\u1220\0\u125a\0\u1294\0\u12ce\0\u1308"+
    "\0\u1342\0\u137c\0\u13b6\0\u13f0\0\u142a\0\256\0\u1464\0\u149e"+
    "\0\256\0\u14d8\0\u1512\0\u154c\0\u1586\0\u15c0\0\u15fa\0\u1634"+
    "\0\256\0\u166e\0\u16a8\0\u16e2\0\256\0\u171c\0\u1756\0\u1790"+
    "\0\u17ca\0\256\0\256\0\u1804\0\u183e\0\u1878\0\256\0\u18b2"+
    "\0\u18ec\0\u1926\0\u1960\0\u199a\0\u19d4\0\u1a0e\0\u1a48\0\u1a82"+
    "\0\u1abc\0\256\0\256\0\256\0\u1af6\0\u1b30\0\u1b6a\0\u1ba4"+
    "\0\u1bde\0\u1c18\0\u1c52\0\u1c8c\0\u1cc6\0\u1d00\0\u1d3a\0\u1d74"+
    "\0\u1dae\0\u1de8\0\u1e22\0\256\0\u1e5c\0\u1e96\0\u1ed0\0\u1f0a"+
    "\0\u1f44\0\u1f7e\0\u1fb8\0\u1ff2\0\256\0\u202c\0\u2066\0\u20a0"+
    "\0\u20da\0\256\0\u2114\0\256\0\u214e\0\u2188\0\u21c2\0\u21fc"+
    "\0\u2236\0\u2270\0\u22aa\0\u22e4\0\u231e\0\256\0\u2358\0\256"+
    "\0\u2392\0\u23cc\0\u2406\0\u2440\0\u247a\0\u24b4\0\u24ee\0\u2528"+
    "\0\u2562\0\u259c\0\256\0\u25d6\0\u2610\0\u264a\0\u2684\0\256"+
    "\0\u26be\0\u26f8\0\256\0\256\0\256\0\256\0\u2732\0\u276c"+
    "\0\u27a6\0\u27e0\0\256\0\256\0\256\0\u281a\0\u2854\0\256"+
    "\0\256\0\u288e\0\u28c8\0\u2902\0\256\0\u293c\0\256\0\u2976"+
    "\0\u29b0\0\u29ea\0\u2a24\0\u2a5e\0\u2a98\0\u2ad2\0\u2b0c\0\u2b46"+
    "\0\u2b80\0\256\0\u2bba\0\u2bf4\0\u2c2e\0\u2c68\0\u2ca2\0\256"+
    "\0\256\0\u2cdc\0\u2d16\0\u2d50\0\256\0\u2d8a\0\256\0\u2dc4"+
    "\0\u2dfe\0\u2e38\0\u2e72\0\u2eac\0\u2ee6\0\u2f20\0\u2f5a\0\u2f94"+
    "\0\256\0\u2fce\0\u3008\0\256\0\256\0\u3042\0\256\0\256"+
    "\0\u307c\0\u30b6\0\256\0\256\0\u30f0\0\u312a\0\u3164\0\u319e"+
    "\0\u31d8\0\256\0\256\0\u3212\0\256\0\256\0\256\0\u324c"+
    "\0\256\0\u3286\0\256\0\256\0\u32c0\0\u32fa\0\u3334\0\u336e"+
    "\0\256\0\u33a8\0\256\0\u33e2\0\u341c\0\u3456\0\u3490\0\u34ca"+
    "\0\u3504\0\u353e\0\u3578\0\u35b2\0\256\0\u35ec\0\u3626\0\u3660"+
    "\0\u369a\0\u36d4\0\u370e\0\u3748\0\u3782\0\u37bc\0\u37f6\0\u3830"+
    "\0\u386a\0\u38a4\0\256\0\u38de\0\256\0\256\0\256\0\256"+
    "\0\u3918\0\u3952\0\u398c\0\u39c6\0\256\0\256\0\u3a00\0\u3a3a"+
    "\0\u3a74\0\256\0\u3aae\0\u3ae8\0\u3b22\0\256\0\u3b5c\0\256"+
    "\0\u3b96\0\u3bd0\0\u3c0a\0\256\0\256\0\256\0\u3c44\0\u3c7e"+
    "\0\u3cb8\0\256\0\256\0\u3cf2\0\256\0\256\0\u3d2c\0\u3d66"+
    "\0\256\0\u3da0\0\u3dda\0\u3e14\0\u3e4e\0\u3e88\0\u3ec2\0\u3efc"+
    "\0\u3f36\0\256\0\u3f70\0\u3faa\0\u3fe4\0\256\0\u401e\0\72"+
    "\0\u4058\0\72";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[386];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\1\3\1\4\1\5\1\6\1\3\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\4\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\4\1\54\1\55\1\56"+
    "\1\4\1\57\1\60\1\61\5\5\74\0\1\3\3\0"+
    "\1\3\66\0\1\4\13\0\5\4\12\0\20\4\3\0"+
    "\2\4\13\0\1\5\51\0\3\5\2\0\7\5\5\0"+
    "\1\6\73\0\1\62\1\10\4\0\1\10\63\0\2\10"+
    "\4\0\1\10\70\0\1\63\66\0\1\64\71\0\1\65"+
    "\2\0\1\66\73\0\1\67\56\0\1\4\13\0\5\4"+
    "\12\0\1\70\17\4\3\0\2\4\12\0\1\4\13\0"+
    "\3\4\1\71\1\4\12\0\3\4\1\72\1\73\4\4"+
    "\1\74\1\75\1\76\4\4\3\0\2\4\12\0\1\4"+
    "\13\0\1\4\1\77\3\4\12\0\6\4\1\100\11\4"+
    "\3\0\2\4\12\0\1\4\13\0\4\4\1\101\12\0"+
    "\20\4\3\0\2\4\12\0\1\4\13\0\5\4\12\0"+
    "\4\4\1\102\1\103\12\4\3\0\1\4\1\104\20\0"+
    "\1\105\63\0\1\4\13\0\1\106\2\4\1\107\1\4"+
    "\12\0\1\4\1\110\1\111\1\4\1\112\1\113\3\4"+
    "\1\114\1\4\1\115\1\116\3\4\3\0\2\4\12\0"+
    "\1\4\13\0\1\4\1\117\3\4\12\0\1\120\17\4"+
    "\3\0\2\4\12\0\1\4\13\0\4\4\1\121\12\0"+
    "\6\4\1\122\3\4\1\123\5\4\3\0\2\4\12\0"+
    "\1\4\13\0\1\4\1\124\1\4\1\125\1\4\12\0"+
    "\1\126\17\4\3\0\2\4\12\0\1\4\13\0\1\4"+
    "\1\127\2\4\1\130\12\0\1\131\11\4\1\132\5\4"+
    "\3\0\2\4\12\0\1\4\13\0\1\4\1\133\3\4"+
    "\12\0\1\134\5\4\1\135\11\4\3\0\2\4\12\0"+
    "\1\4\13\0\5\4\12\0\2\4\1\136\1\4\1\137"+
    "\6\4\1\140\4\4\3\0\2\4\12\0\1\4\13\0"+
    "\5\4\12\0\1\141\5\4\1\142\1\4\1\143\7\4"+
    "\3\0\2\4\12\0\1\4\13\0\1\4\1\144\1\4"+
    "\1\145\1\4\12\0\10\4\1\146\6\4\1\147\3\0"+
    "\2\4\12\0\1\4\13\0\5\4\12\0\2\4\1\150"+
    "\1\4\1\151\13\4\3\0\2\4\12\0\1\4\13\0"+
    "\1\4\1\152\3\4\12\0\6\4\1\153\3\4\1\154"+
    "\5\4\3\0\2\4\12\0\1\4\13\0\1\4\1\155"+
    "\2\4\1\156\12\0\5\4\1\157\4\4\1\160\5\4"+
    "\3\0\2\4\12\0\1\4\13\0\4\4\1\161\12\0"+
    "\12\4\1\162\5\4\3\0\2\4\12\0\1\4\13\0"+
    "\5\4\12\0\1\163\17\4\3\0\2\4\12\0\1\4"+
    "\13\0\1\4\1\164\3\4\12\0\20\4\3\0\2\4"+
    "\13\0\1\5\51\0\1\5\1\165\1\5\2\0\7\5"+
    "\1\62\2\0\67\62\3\0\1\4\13\0\5\4\12\0"+
    "\3\4\1\166\14\4\3\0\2\4\12\0\1\4\13\0"+
    "\4\4\1\167\12\0\20\4\3\0\2\4\12\0\1\4"+
    "\13\0\5\4\12\0\10\4\1\170\7\4\3\0\2\4"+
    "\12\0\1\4\13\0\5\4\12\0\11\4\1\171\6\4"+
    "\3\0\2\4\12\0\1\4\13\0\5\4\12\0\7\4"+
    "\1\172\10\4\3\0\2\4\12\0\1\4\13\0\5\4"+
    "\12\0\2\4\1\173\12\4\1\174\2\4\3\0\2\4"+
    "\12\0\1\4\13\0\5\4\12\0\1\4\1\175\1\4"+
    "\1\176\5\4\1\177\3\4\1\200\2\4\3\0\2\4"+
    "\12\0\1\4\13\0\2\4\1\201\2\4\12\0\11\4"+
    "\1\202\6\4\3\0\2\4\12\0\1\4\13\0\5\4"+
    "\12\0\2\4\1\203\15\4\3\0\2\4\12\0\1\4"+
    "\13\0\5\4\12\0\6\4\1\204\11\4\3\0\2\4"+
    "\12\0\1\4\13\0\4\4\1\205\12\0\20\4\3\0"+
    "\2\4\12\0\1\4\13\0\3\4\1\206\1\4\12\0"+
    "\1\4\1\207\16\4\3\0\2\4\12\0\1\4\13\0"+
    "\5\4\12\0\1\4\1\210\16\4\3\0\2\4\12\0"+
    "\1\4\13\0\5\4\12\0\2\4\1\211\15\4\3\0"+
    "\2\4\12\0\1\4\13\0\2\4\1\212\2\4\12\0"+
    "\20\4\3\0\2\4\12\0\1\4\13\0\5\4\12\0"+
    "\5\4\1\213\1\214\11\4\3\0\2\4\12\0\1\4"+
    "\13\0\5\4\12\0\11\4\1\215\6\4\3\0\2\4"+
    "\12\0\1\4\13\0\5\4\12\0\11\4\1\216\6\4"+
    "\3\0\2\4\12\0\1\4\13\0\5\4\12\0\2\4"+
    "\1\217\15\4\3\0\2\4\12\0\1\4\13\0\1\220"+
    "\4\4\12\0\4\4\1\221\13\4\3\0\2\4\12\0"+
    "\1\4\13\0\5\4\12\0\2\4\1\222\15\4\3\0"+
    "\2\4\12\0\1\4\13\0\5\4\12\0\5\4\1\223"+
    "\10\4\1\224\1\4\3\0\2\4\12\0\1\4\13\0"+
    "\5\4\12\0\15\4\1\225\2\4\3\0\2\4\12\0"+
    "\1\4\13\0\5\4\12\0\14\4\1\226\3\4\3\0"+
    "\2\4\12\0\1\4\13\0\3\4\1\227\1\4\12\0"+
    "\20\4\3\0\2\4\12\0\1\4\13\0\1\4\1\230"+
    "\3\4\12\0\20\4\3\0\2\4\12\0\1\4\13\0"+
    "\5\4\12\0\1\4\1\231\16\4\3\0\2\4\12\0"+
    "\1\4\13\0\3\4\1\232\1\4\12\0\11\4\1\233"+
    "\6\4\3\0\2\4\12\0\1\4\13\0\5\4\12\0"+
    "\7\4\1\234\10\4\3\0\1\4\1\235\12\0\1\4"+
    "\13\0\5\4\12\0\4\4\1\236\13\4\3\0\2\4"+
    "\12\0\1\4\13\0\5\4\12\0\5\4\1\237\12\4"+
    "\3\0\2\4\12\0\1\4\13\0\1\4\1\240\3\4"+
    "\12\0\20\4\3\0\2\4\12\0\1\4\13\0\5\4"+
    "\12\0\14\4\1\241\3\4\3\0\2\4\12\0\1\4"+
    "\13\0\5\4\12\0\4\4\1\242\7\4\1\243\3\4"+
    "\3\0\2\4\12\0\1\4\13\0\1\4\1\244\3\4"+
    "\12\0\20\4\3\0\2\4\12\0\1\4\13\0\5\4"+
    "\12\0\6\4\1\245\11\4\3\0\2\4\12\0\1\4"+
    "\13\0\5\4\12\0\11\4\1\246\6\4\3\0\2\4"+
    "\12\0\1\4\13\0\4\4\1\247\12\0\6\4\1\250"+
    "\11\4\3\0\2\4\12\0\1\4\13\0\5\4\12\0"+
    "\1\251\17\4\3\0\2\4\12\0\1\4\13\0\4\4"+
    "\1\252\12\0\20\4\3\0\2\4\12\0\1\4\13\0"+
    "\5\4\12\0\3\4\1\253\14\4\3\0\2\4\12\0"+
    "\1\4\13\0\4\4\1\254\12\0\20\4\3\0\2\4"+
    "\12\0\1\4\13\0\5\4\12\0\6\4\1\255\2\4"+
    "\1\256\6\4\3\0\2\4\12\0\1\4\13\0\3\4"+
    "\1\257\1\4\12\0\20\4\3\0\2\4\12\0\1\4"+
    "\13\0\5\4\12\0\5\4\1\260\12\4\3\0\2\4"+
    "\12\0\1\4\13\0\5\4\12\0\4\4\1\261\13\4"+
    "\3\0\2\4\12\0\1\4\13\0\2\4\1\262\2\4"+
    "\12\0\20\4\3\0\2\4\12\0\1\4\13\0\5\4"+
    "\12\0\15\4\1\263\2\4\3\0\2\4\12\0\1\4"+
    "\13\0\1\4\1\264\3\4\12\0\20\4\3\0\2\4"+
    "\12\0\1\4\13\0\5\4\12\0\2\4\1\265\10\4"+
    "\1\266\4\4\3\0\2\4\12\0\1\4\13\0\5\4"+
    "\12\0\4\4\1\267\13\4\3\0\2\4\12\0\1\4"+
    "\13\0\5\4\12\0\1\270\17\4\3\0\2\4\12\0"+
    "\1\4\13\0\3\4\1\271\1\4\12\0\20\4\3\0"+
    "\2\4\12\0\1\4\13\0\3\4\1\272\1\4\12\0"+
    "\20\4\3\0\2\4\13\0\1\5\51\0\3\5\2\0"+
    "\2\5\1\273\4\5\3\0\1\4\13\0\5\4\12\0"+
    "\4\4\1\274\13\4\3\0\2\4\12\0\1\4\13\0"+
    "\4\4\1\275\12\0\20\4\3\0\2\4\12\0\1\4"+
    "\13\0\5\4\12\0\4\4\1\276\13\4\3\0\2\4"+
    "\12\0\1\4\13\0\5\4\12\0\1\4\1\277\16\4"+
    "\3\0\2\4\12\0\1\4\13\0\5\4\12\0\6\4"+
    "\1\300\11\4\3\0\2\4\12\0\1\4\13\0\1\4"+
    "\1\301\3\4\12\0\20\4\3\0\2\4\12\0\1\4"+
    "\13\0\1\4\1\302\3\4\12\0\20\4\3\0\2\4"+
    "\12\0\1\4\13\0\5\4\12\0\12\4\1\303\5\4"+
    "\3\0\2\4\12\0\1\4\13\0\5\4\12\0\6\4"+
    "\1\304\11\4\3\0\2\4\12\0\1\4\13\0\5\4"+
    "\12\0\6\4\1\305\11\4\3\0\2\4\12\0\1\4"+
    "\13\0\4\4\1\306\12\0\6\4\1\307\11\4\3\0"+
    "\2\4\12\0\1\4\13\0\5\4\12\0\11\4\1\310"+
    "\6\4\3\0\2\4\12\0\1\4\13\0\5\4\12\0"+
    "\1\311\17\4\3\0\2\4\12\0\1\4\13\0\5\4"+
    "\12\0\10\4\1\312\7\4\3\0\2\4\12\0\1\4"+
    "\13\0\4\4\1\313\12\0\20\4\3\0\2\4\12\0"+
    "\1\4\13\0\4\4\1\314\12\0\20\4\3\0\2\4"+
    "\12\0\1\4\13\0\5\4\12\0\1\315\17\4\3\0"+
    "\2\4\12\0\1\4\13\0\3\4\1\316\1\4\12\0"+
    "\20\4\3\0\2\4\12\0\1\4\13\0\4\4\1\317"+
    "\12\0\20\4\3\0\2\4\12\0\1\4\13\0\5\4"+
    "\12\0\3\4\1\320\14\4\3\0\2\4\12\0\1\4"+
    "\13\0\5\4\12\0\2\4\1\321\10\4\1\322\4\4"+
    "\3\0\2\4\12\0\1\4\13\0\4\4\1\323\12\0"+
    "\20\4\3\0\2\4\12\0\1\4\13\0\4\4\1\324"+
    "\12\0\20\4\3\0\2\4\12\0\1\4\13\0\4\4"+
    "\1\325\12\0\20\4\3\0\2\4\12\0\1\4\13\0"+
    "\5\4\12\0\4\4\1\326\13\4\3\0\2\4\12\0"+
    "\1\4\13\0\5\4\12\0\11\4\1\327\6\4\3\0"+
    "\2\4\12\0\1\4\13\0\5\4\12\0\11\4\1\330"+
    "\6\4\3\0\2\4\12\0\1\4\13\0\5\4\12\0"+
    "\1\4\1\331\16\4\3\0\2\4\12\0\1\4\13\0"+
    "\5\4\12\0\20\4\3\0\1\332\1\4\12\0\1\4"+
    "\13\0\5\4\12\0\11\4\1\333\6\4\3\0\2\4"+
    "\12\0\1\4\13\0\2\4\1\334\2\4\12\0\20\4"+
    "\3\0\2\4\12\0\1\4\13\0\5\4\12\0\5\4"+
    "\1\335\12\4\3\0\2\4\12\0\1\4\13\0\5\4"+
    "\12\0\3\4\1\336\14\4\3\0\2\4\12\0\1\4"+
    "\13\0\4\4\1\337\12\0\20\4\3\0\2\4\12\0"+
    "\1\4\13\0\5\4\12\0\20\4\3\0\1\340\1\4"+
    "\12\0\1\4\13\0\3\4\1\341\1\4\12\0\20\4"+
    "\3\0\2\4\12\0\1\4\13\0\5\4\12\0\12\4"+
    "\1\342\5\4\3\0\2\4\12\0\1\4\13\0\5\4"+
    "\12\0\11\4\1\343\6\4\3\0\2\4\12\0\1\4"+
    "\13\0\5\4\12\0\10\4\1\344\7\4\3\0\2\4"+
    "\12\0\1\4\13\0\5\4\12\0\4\4\1\345\13\4"+
    "\3\0\2\4\12\0\1\4\13\0\5\4\12\0\5\4"+
    "\1\346\12\4\3\0\2\4\12\0\1\4\13\0\5\4"+
    "\12\0\4\4\1\347\13\4\3\0\2\4\12\0\1\4"+
    "\13\0\5\4\12\0\4\4\1\350\13\4\3\0\2\4"+
    "\12\0\1\4\13\0\4\4\1\351\12\0\20\4\3\0"+
    "\2\4\12\0\1\4\13\0\5\4\12\0\11\4\1\352"+
    "\6\4\3\0\2\4\12\0\1\4\13\0\5\4\12\0"+
    "\6\4\1\353\11\4\3\0\2\4\12\0\1\4\13\0"+
    "\1\354\4\4\12\0\20\4\3\0\2\4\12\0\1\4"+
    "\13\0\4\4\1\355\12\0\20\4\3\0\2\4\12\0"+
    "\1\4\13\0\5\4\12\0\1\4\1\356\16\4\3\0"+
    "\2\4\12\0\1\4\13\0\5\4\12\0\17\4\1\357"+
    "\3\0\2\4\12\0\1\4\13\0\5\4\12\0\6\4"+
    "\1\360\11\4\3\0\2\4\12\0\1\4\13\0\5\4"+
    "\12\0\1\4\1\361\16\4\3\0\2\4\12\0\1\4"+
    "\13\0\5\4\12\0\13\4\1\362\4\4\3\0\2\4"+
    "\12\0\1\4\13\0\4\4\1\363\12\0\20\4\3\0"+
    "\2\4\12\0\1\4\13\0\3\4\1\364\1\4\12\0"+
    "\20\4\3\0\2\4\12\0\1\4\13\0\5\4\12\0"+
    "\6\4\1\365\11\4\3\0\2\4\13\0\1\5\51\0"+
    "\3\5\2\0\1\366\6\5\3\0\1\4\13\0\3\4"+
    "\1\367\1\4\12\0\20\4\3\0\2\4\12\0\1\4"+
    "\13\0\5\4\12\0\11\4\1\370\6\4\3\0\2\4"+
    "\12\0\1\4\13\0\1\4\1\371\3\4\12\0\20\4"+
    "\3\0\2\4\12\0\1\4\13\0\5\4\12\0\11\4"+
    "\1\372\6\4\3\0\2\4\12\0\1\4\13\0\3\4"+
    "\1\373\1\4\12\0\20\4\3\0\2\4\12\0\1\4"+
    "\13\0\3\4\1\374\1\4\12\0\20\4\3\0\2\4"+
    "\12\0\1\4\13\0\3\4\1\375\1\4\12\0\20\4"+
    "\3\0\2\4\12\0\1\4\13\0\5\4\12\0\2\4"+
    "\1\376\15\4\3\0\2\4\12\0\1\4\13\0\5\4"+
    "\12\0\11\4\1\377\6\4\3\0\2\4\12\0\1\4"+
    "\13\0\5\4\12\0\13\4\1\u0100\4\4\3\0\2\4"+
    "\12\0\1\4\13\0\5\4\12\0\17\4\1\u0101\3\0"+
    "\2\4\12\0\1\4\13\0\5\4\12\0\6\4\1\u0102"+
    "\11\4\3\0\2\4\12\0\1\4\13\0\5\4\12\0"+
    "\2\4\1\u0103\15\4\3\0\2\4\12\0\1\4\13\0"+
    "\3\4\1\u0104\1\4\12\0\20\4\3\0\2\4\12\0"+
    "\1\4\13\0\5\4\12\0\2\4\1\u0105\15\4\3\0"+
    "\2\4\12\0\1\4\13\0\5\4\12\0\6\4\1\u0106"+
    "\11\4\3\0\2\4\12\0\1\4\13\0\3\4\1\u0107"+
    "\1\4\12\0\20\4\3\0\2\4\12\0\1\4\13\0"+
    "\1\4\1\u0108\3\4\12\0\20\4\3\0\2\4\12\0"+
    "\1\4\13\0\5\4\12\0\11\4\1\u0109\6\4\3\0"+
    "\2\4\12\0\1\4\13\0\5\4\12\0\6\4\1\u010a"+
    "\11\4\3\0\2\4\12\0\1\4\13\0\5\4\12\0"+
    "\1\4\1\u010b\16\4\3\0\2\4\12\0\1\4\13\0"+
    "\3\4\1\u010c\1\4\12\0\20\4\3\0\2\4\12\0"+
    "\1\4\13\0\5\4\12\0\1\u010d\17\4\3\0\2\4"+
    "\12\0\1\4\13\0\5\4\12\0\17\4\1\u010e\3\0"+
    "\2\4\12\0\1\4\13\0\4\4\1\u010f\12\0\20\4"+
    "\3\0\2\4\12\0\1\4\13\0\5\4\12\0\1\u0110"+
    "\17\4\3\0\2\4\12\0\1\4\13\0\5\4\12\0"+
    "\5\4\1\u0111\12\4\3\0\2\4\12\0\1\4\13\0"+
    "\5\4\12\0\1\u0112\17\4\3\0\2\4\12\0\1\4"+
    "\13\0\5\4\12\0\1\u0113\17\4\3\0\2\4\12\0"+
    "\1\4\13\0\5\4\12\0\11\4\1\u0114\6\4\3\0"+
    "\2\4\12\0\1\4\13\0\4\4\1\u0115\12\0\20\4"+
    "\3\0\2\4\12\0\1\4\13\0\5\4\12\0\2\4"+
    "\1\u0116\15\4\3\0\2\4\12\0\1\4\13\0\5\4"+
    "\12\0\2\4\1\u0117\15\4\3\0\2\4\12\0\1\4"+
    "\13\0\5\4\12\0\5\4\1\u0118\12\4\3\0\2\4"+
    "\12\0\1\4\13\0\5\4\12\0\1\u0119\17\4\3\0"+
    "\2\4\12\0\1\4\13\0\5\4\12\0\11\4\1\u011a"+
    "\6\4\3\0\2\4\12\0\1\4\13\0\5\4\12\0"+
    "\4\4\1\u011b\13\4\3\0\2\4\12\0\1\4\13\0"+
    "\5\4\12\0\20\4\3\0\1\u011c\1\4\12\0\1\4"+
    "\13\0\4\4\1\u011d\12\0\20\4\3\0\2\4\12\0"+
    "\1\4\13\0\3\4\1\u011e\1\4\12\0\20\4\3\0"+
    "\2\4\12\0\1\4\13\0\2\4\1\u011f\2\4\12\0"+
    "\20\4\3\0\2\4\12\0\1\4\13\0\5\4\12\0"+
    "\1\u0120\17\4\3\0\2\4\13\0\1\5\51\0\3\5"+
    "\2\0\3\5\1\u0121\3\5\3\0\1\4\13\0\5\4"+
    "\12\0\2\4\1\u0122\15\4\3\0\2\4\12\0\1\4"+
    "\13\0\1\4\1\u0123\3\4\12\0\20\4\3\0\2\4"+
    "\12\0\1\4\13\0\5\4\12\0\4\4\1\u0124\13\4"+
    "\3\0\2\4\12\0\1\4\13\0\2\4\1\u0125\2\4"+
    "\12\0\20\4\3\0\2\4\12\0\1\4\13\0\5\4"+
    "\12\0\11\4\1\u0126\6\4\3\0\2\4\12\0\1\4"+
    "\13\0\5\4\12\0\4\4\1\u0127\13\4\3\0\2\4"+
    "\12\0\1\4\13\0\5\4\12\0\11\4\1\u0128\6\4"+
    "\3\0\2\4\12\0\1\4\13\0\5\4\12\0\17\4"+
    "\1\u0129\3\0\2\4\12\0\1\4\13\0\5\4\12\0"+
    "\11\4\1\u012a\6\4\3\0\2\4\12\0\1\4\13\0"+
    "\5\4\12\0\2\4\1\u012b\15\4\3\0\2\4\12\0"+
    "\1\4\13\0\5\4\12\0\11\4\1\u012c\6\4\3\0"+
    "\2\4\12\0\1\4\13\0\5\4\12\0\14\4\1\u012d"+
    "\3\4\3\0\2\4\12\0\1\4\13\0\5\4\12\0"+
    "\4\4\1\u012e\13\4\3\0\2\4\12\0\1\4\13\0"+
    "\5\4\12\0\1\u012f\17\4\3\0\2\4\12\0\1\4"+
    "\13\0\5\4\12\0\15\4\1\u0130\2\4\3\0\2\4"+
    "\12\0\1\4\13\0\5\4\12\0\11\4\1\u0131\6\4"+
    "\3\0\2\4\12\0\1\4\13\0\5\4\12\0\6\4"+
    "\1\u0132\11\4\3\0\2\4\12\0\1\4\13\0\5\4"+
    "\12\0\5\4\1\u0133\12\4\3\0\2\4\12\0\1\4"+
    "\13\0\5\4\12\0\3\4\1\u0134\14\4\3\0\2\4"+
    "\12\0\1\4\13\0\2\4\1\u0135\2\4\12\0\2\4"+
    "\1\u0136\15\4\3\0\2\4\12\0\1\4\13\0\5\4"+
    "\12\0\15\4\1\u0137\2\4\3\0\2\4\12\0\1\4"+
    "\13\0\5\4\12\0\15\4\1\u0138\2\4\3\0\2\4"+
    "\12\0\1\4\13\0\3\4\1\u0139\1\4\12\0\20\4"+
    "\3\0\2\4\12\0\1\4\13\0\5\4\12\0\3\4"+
    "\1\u013a\14\4\3\0\2\4\12\0\1\4\13\0\5\4"+
    "\12\0\11\4\1\u013b\6\4\3\0\2\4\12\0\1\4"+
    "\13\0\5\4\12\0\6\4\1\u013c\11\4\3\0\2\4"+
    "\12\0\1\4\13\0\3\4\1\u013d\1\4\12\0\20\4"+
    "\3\0\2\4\12\0\1\4\13\0\5\4\12\0\1\u013e"+
    "\5\4\1\u013f\11\4\3\0\2\4\12\0\1\4\13\0"+
    "\4\4\1\u0140\12\0\20\4\3\0\2\4\12\0\1\4"+
    "\13\0\5\4\12\0\14\4\1\u0141\3\4\3\0\2\4"+
    "\13\0\1\5\24\0\1\u0142\24\0\3\5\2\0\7\5"+
    "\3\0\1\4\13\0\5\4\12\0\4\4\1\u0143\13\4"+
    "\3\0\2\4\12\0\1\4\13\0\4\4\1\u0144\12\0"+
    "\20\4\3\0\2\4\12\0\1\4\13\0\4\4\1\u0145"+
    "\12\0\20\4\3\0\2\4\12\0\1\4\13\0\5\4"+
    "\12\0\12\4\1\u0146\5\4\3\0\2\4\12\0\1\4"+
    "\13\0\4\4\1\u0147\12\0\20\4\3\0\2\4\12\0"+
    "\1\4\13\0\5\4\12\0\4\4\1\u0148\13\4\3\0"+
    "\2\4\12\0\1\4\13\0\5\4\12\0\12\4\1\u0149"+
    "\5\4\3\0\2\4\12\0\1\4\13\0\5\4\12\0"+
    "\11\4\1\u014a\6\4\3\0\2\4\12\0\1\4\13\0"+
    "\4\4\1\u014b\12\0\20\4\3\0\2\4\12\0\1\4"+
    "\13\0\5\4\12\0\12\4\1\u014c\5\4\3\0\2\4"+
    "\12\0\1\4\13\0\5\4\12\0\2\4\1\u014d\15\4"+
    "\3\0\2\4\12\0\1\4\13\0\4\4\1\u014e\12\0"+
    "\20\4\3\0\2\4\12\0\1\4\13\0\4\4\1\u014f"+
    "\12\0\20\4\3\0\2\4\12\0\1\4\13\0\5\4"+
    "\12\0\17\4\1\u0150\3\0\2\4\12\0\1\4\13\0"+
    "\1\4\1\u0151\3\4\12\0\20\4\3\0\2\4\12\0"+
    "\1\4\13\0\5\4\5\0\1\u0152\4\0\20\4\3\0"+
    "\2\4\12\0\1\4\13\0\1\4\1\u0153\3\4\12\0"+
    "\20\4\3\0\2\4\12\0\1\4\13\0\5\4\12\0"+
    "\11\4\1\u0154\6\4\3\0\2\4\12\0\1\4\13\0"+
    "\5\4\12\0\1\4\1\u0155\16\4\3\0\2\4\12\0"+
    "\1\4\13\0\2\4\1\u0156\2\4\12\0\20\4\3\0"+
    "\2\4\12\0\1\4\13\0\5\4\12\0\5\4\1\u0157"+
    "\12\4\3\0\2\4\76\0\1\u0158\5\0\1\4\13\0"+
    "\4\4\1\u0159\12\0\20\4\3\0\2\4\12\0\1\4"+
    "\13\0\3\4\1\u015a\1\4\12\0\20\4\3\0\2\4"+
    "\12\0\1\4\13\0\5\4\12\0\1\4\1\u015b\16\4"+
    "\3\0\2\4\12\0\1\4\13\0\5\4\12\0\11\4"+
    "\1\u015c\6\4\3\0\2\4\12\0\1\4\13\0\5\4"+
    "\12\0\4\4\1\u015d\13\4\3\0\2\4\12\0\1\4"+
    "\13\0\5\4\12\0\11\4\1\u015e\6\4\3\0\2\4"+
    "\12\0\1\4\13\0\3\4\1\u015f\1\4\12\0\20\4"+
    "\3\0\2\4\12\0\1\4\13\0\5\4\12\0\17\4"+
    "\1\u0160\3\0\2\4\12\0\1\4\13\0\3\4\1\u0161"+
    "\1\4\12\0\20\4\3\0\2\4\12\0\1\4\13\0"+
    "\3\4\1\u0162\1\4\12\0\20\4\3\0\2\4\32\0"+
    "\1\u0163\51\0\1\4\13\0\5\4\12\0\4\4\1\u0164"+
    "\13\4\3\0\2\4\12\0\1\4\13\0\4\4\1\u0165"+
    "\12\0\20\4\3\0\2\4\12\0\1\4\13\0\4\4"+
    "\1\u0166\12\0\20\4\3\0\2\4\77\0\1\u0167\4\0"+
    "\1\4\13\0\5\4\12\0\1\4\1\u0168\16\4\3\0"+
    "\2\4\12\0\1\4\13\0\5\4\12\0\11\4\1\u0169"+
    "\6\4\3\0\2\4\12\0\1\4\13\0\4\4\1\u016a"+
    "\12\0\20\4\3\0\2\4\12\0\1\4\13\0\5\4"+
    "\12\0\11\4\1\u016b\6\4\3\0\2\4\12\0\1\4"+
    "\13\0\5\4\12\0\1\u016c\17\4\3\0\2\4\12\0"+
    "\1\4\13\0\4\4\1\u016d\12\0\20\4\3\0\2\4"+
    "\12\0\1\4\13\0\5\4\12\0\11\4\1\u016e\6\4"+
    "\3\0\2\4\60\0\1\u016f\111\0\1\u0170\3\0\1\4"+
    "\13\0\5\4\12\0\11\4\1\u0171\6\4\3\0\2\4"+
    "\12\0\1\4\13\0\5\4\12\0\12\4\1\u0172\5\4"+
    "\3\0\2\4\12\0\1\4\13\0\5\4\12\0\11\4"+
    "\1\u0173\6\4\3\0\2\4\60\0\1\u0174\103\0\1\u0175"+
    "\11\0\1\4\13\0\3\4\1\u0176\1\4\12\0\20\4"+
    "\3\0\2\4\12\0\1\4\13\0\5\4\12\0\6\4"+
    "\1\u0177\11\4\3\0\2\4\32\0\1\u0178\77\0\1\u0179"+
    "\43\0\1\4\13\0\4\4\1\u017a\12\0\20\4\3\0"+
    "\2\4\12\0\1\4\13\0\1\4\1\u017b\3\4\12\0"+
    "\20\4\3\0\2\4\46\0\1\u017c\120\0\1\u017d\6\0"+
    "\1\4\13\0\5\4\12\0\4\4\1\u017e\13\4\3\0"+
    "\2\4\56\0\1\u017f\105\0\1\u0180\26\0\1\u0181\73\0"+
    "\1\u0182\47\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16530];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\21\1\2\11\1\1\7\11\25\1\5\11"+
    "\15\1\1\11\374\1\1\0\17\1\1\0\5\1\1\0"+
    "\12\1\1\0\3\1\1\0\7\1\2\0\3\1\2\0"+
    "\2\1\2\0\2\1\2\0\1\1\1\0\1\11\1\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[386];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _VHDLLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _VHDLLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 114: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 115: break;
          case 3: 
            { return LOWERCASE_RE;
            } 
            // fall through
          case 116: break;
          case 4: 
            { return UPPERCASE_RE;
            } 
            // fall through
          case 117: break;
          case 5: 
            { return DIGIT_RE;
            } 
            // fall through
          case 118: break;
          case 6: 
            { return MINUS;
            } 
            // fall through
          case 119: break;
          case 7: 
            { return ADDING_OPERATOR_RE;
            } 
            // fall through
          case 120: break;
          case 8: 
            { return EQUALS;
            } 
            // fall through
          case 121: break;
          case 9: 
            { return MULTIPLYING_OPERATOR_RE;
            } 
            // fall through
          case 122: break;
          case 10: 
            { return RELATIONAL_OPERATOR_RE;
            } 
            // fall through
          case 123: break;
          case 11: 
            { return PLUS;
            } 
            // fall through
          case 124: break;
          case 12: 
            { return DOT;
            } 
            // fall through
          case 125: break;
          case 13: 
            { return COMMA;
            } 
            // fall through
          case 126: break;
          case 14: 
            { return COLON;
            } 
            // fall through
          case 127: break;
          case 15: 
            { return SEMICOLON;
            } 
            // fall through
          case 128: break;
          case 16: 
            { return BACKSLASH;
            } 
            // fall through
          case 129: break;
          case 17: 
            { return UNDERLINE;
            } 
            // fall through
          case 130: break;
          case 18: 
            { return HASH;
            } 
            // fall through
          case 131: break;
          case 19: 
            { return QUOTE;
            } 
            // fall through
          case 132: break;
          case 20: 
            { return PIPE;
            } 
            // fall through
          case 133: break;
          case 21: 
            { return DQUOTE;
            } 
            // fall through
          case 134: break;
          case 22: 
            { return B;
            } 
            // fall through
          case 135: break;
          case 23: 
            { return O;
            } 
            // fall through
          case 136: break;
          case 24: 
            { return X;
            } 
            // fall through
          case 137: break;
          case 25: 
            { return E;
            } 
            // fall through
          case 138: break;
          case 26: 
            { return COMMENT;
            } 
            // fall through
          case 139: break;
          case 27: 
            { return RARROW;
            } 
            // fall through
          case 140: break;
          case 28: 
            { return LARROW;
            } 
            // fall through
          case 141: break;
          case 29: 
            { return RANGE_RE;
            } 
            // fall through
          case 142: break;
          case 30: 
            { return STARSTAR;
            } 
            // fall through
          case 143: break;
          case 31: 
            { return OR;
            } 
            // fall through
          case 144: break;
          case 32: 
            { return ON;
            } 
            // fall through
          case 145: break;
          case 33: 
            { return OF;
            } 
            // fall through
          case 146: break;
          case 34: 
            { return COLONEQUALS;
            } 
            // fall through
          case 147: break;
          case 35: 
            { return IS;
            } 
            // fall through
          case 148: break;
          case 36: 
            { return IN;
            } 
            // fall through
          case 149: break;
          case 37: 
            { return IF;
            } 
            // fall through
          case 150: break;
          case 38: 
            { return TO;
            } 
            // fall through
          case 151: break;
          case 39: 
            { return MAP;
            } 
            // fall through
          case 152: break;
          case 40: 
            { return OUT;
            } 
            // fall through
          case 153: break;
          case 41: 
            { return END;
            } 
            // fall through
          case 154: break;
          case 42: 
            { return AME;
            } 
            // fall through
          case 155: break;
          case 43: 
            { return AND;
            } 
            // fall through
          case 156: break;
          case 44: 
            { return ALL;
            } 
            // fall through
          case 157: break;
          case 45: 
            { return ABS;
            } 
            // fall through
          case 158: break;
          case 46: 
            { return NOR;
            } 
            // fall through
          case 159: break;
          case 47: 
            { return NOT;
            } 
            // fall through
          case 160: break;
          case 48: 
            { return NEW;
            } 
            // fall through
          case 161: break;
          case 49: 
            { return USE;
            } 
            // fall through
          case 162: break;
          case 50: 
            { return FOR;
            } 
            // fall through
          case 163: break;
          case 51: 
            { return BUS;
            } 
            // fall through
          case 164: break;
          case 52: 
            { return XOR;
            } 
            // fall through
          case 165: break;
          case 53: 
            { return OPEN;
            } 
            // fall through
          case 166: break;
          case 54: 
            { return ELSE;
            } 
            // fall through
          case 167: break;
          case 55: 
            { return EXIT;
            } 
            // fall through
          case 168: break;
          case 56: 
            { return CASE;
            } 
            // fall through
          case 169: break;
          case 57: 
            { return PORT;
            } 
            // fall through
          case 170: break;
          case 58: 
            { return NEXT;
            } 
            // fall through
          case 171: break;
          case 59: 
            { return NAND;
            } 
            // fall through
          case 172: break;
          case 60: 
            { return NULL;
            } 
            // fall through
          case 173: break;
          case 61: 
            { return LOOP;
            } 
            // fall through
          case 174: break;
          case 62: 
            { return WAIT;
            } 
            // fall through
          case 175: break;
          case 63: 
            { return WITH;
            } 
            // fall through
          case 176: break;
          case 64: 
            { return WHEN;
            } 
            // fall through
          case 177: break;
          case 65: 
            { return THEN;
            } 
            // fall through
          case 178: break;
          case 66: 
            { return TYPE;
            } 
            // fall through
          case 179: break;
          case 67: 
            { return FILE;
            } 
            // fall through
          case 180: break;
          case 68: 
            { return BODY;
            } 
            // fall through
          case 181: break;
          case 69: 
            { return DIGIT;
            } 
            // fall through
          case 182: break;
          case 70: 
            { return ELSIF;
            } 
            // fall through
          case 183: break;
          case 71: 
            { return ARRAY;
            } 
            // fall through
          case 184: break;
          case 72: 
            { return ALIAS;
            } 
            // fall through
          case 185: break;
          case 73: 
            { return AFTER;
            } 
            // fall through
          case 186: break;
          case 74: 
            { return LABEL;
            } 
            // fall through
          case 187: break;
          case 75: 
            { return INOUT;
            } 
            // fall through
          case 188: break;
          case 76: 
            { return WHILE;
            } 
            // fall through
          case 189: break;
          case 77: 
            { return UNITS;
            } 
            // fall through
          case 190: break;
          case 78: 
            { return UNTIL;
            } 
            // fall through
          case 191: break;
          case 79: 
            { return BEGIN;
            } 
            // fall through
          case 192: break;
          case 80: 
            { return BLOCK;
            } 
            // fall through
          case 193: break;
          case 81: 
            { return OTHERS;
            } 
            // fall through
          case 194: break;
          case 82: 
            { return DOWNTO;
            } 
            // fall through
          case 195: break;
          case 83: 
            { return RECORD;
            } 
            // fall through
          case 196: break;
          case 84: 
            { return REPORT;
            } 
            // fall through
          case 197: break;
          case 85: 
            { return RETURN;
            } 
            // fall through
          case 198: break;
          case 86: 
            { return ENTITY;
            } 
            // fall through
          case 199: break;
          case 87: 
            { return ACCESS;
            } 
            // fall through
          case 200: break;
          case 88: 
            { return ASSERT;
            } 
            // fall through
          case 201: break;
          case 89: 
            { return SELECT;
            } 
            // fall through
          case 202: break;
          case 90: 
            { return SIGNAL;
            } 
            // fall through
          case 203: break;
          case 91: 
            { return BUFFER;
            } 
            // fall through
          case 204: break;
          case 92: 
            { return SUBTYPE;
            } 
            // fall through
          case 205: break;
          case 93: 
            { return PROCESS;
            } 
            // fall through
          case 206: break;
          case 94: 
            { return PACKAGE;
            } 
            // fall through
          case 207: break;
          case 95: 
            { return LINKAGE;
            } 
            // fall through
          case 208: break;
          case 96: 
            { return LIBRARY;
            } 
            // fall through
          case 209: break;
          case 97: 
            { return GENERIC;
            } 
            // fall through
          case 210: break;
          case 98: 
            { return GUARDED;
            } 
            // fall through
          case 211: break;
          case 99: 
            { return REGISTER;
            } 
            // fall through
          case 212: break;
          case 100: 
            { return CONSTANT;
            } 
            // fall through
          case 213: break;
          case 101: 
            { return SEVERITY;
            } 
            // fall through
          case 214: break;
          case 102: 
            { return FUNCTION;
            } 
            // fall through
          case 215: break;
          case 103: 
            { return GENERATE;
            } 
            // fall through
          case 216: break;
          case 104: 
            { return VARIABLE;
            } 
            // fall through
          case 217: break;
          case 105: 
            { return ATTRIBUTE;
            } 
            // fall through
          case 218: break;
          case 106: 
            { return COMPONENT;
            } 
            // fall through
          case 219: break;
          case 107: 
            { return PROCEDURE;
            } 
            // fall through
          case 220: break;
          case 108: 
            { return TRANSPORT;
            } 
            // fall through
          case 221: break;
          case 109: 
            { return DISCONNECT;
            } 
            // fall through
          case 222: break;
          case 110: 
            { return ARCHITECTURE;
            } 
            // fall through
          case 223: break;
          case 111: 
            { return CONFIGURATION;
            } 
            // fall through
          case 224: break;
          case 112: 
            { return LOWER_CASE_RE;
            } 
            // fall through
          case 225: break;
          case 113: 
            { return FORMAT_EFFECTOR;
            } 
            // fall through
          case 226: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
