{
  parserClass="com.rawatech.parser.VHDLParser"

  psiClassPrefix="VHDL"
  psiImplClassSuffix="Impl"
  psiPackage="com.rawatech.psi"
  psiImplPackage="com.rawatech.psi.impl"

  elementTypeHolderClass="com.rawatech.psi.VHDLTypes"
  elementTypeClass="com.rawatech.psi.VHDLElementType"
  tokenTypeClass="com.rawatech.psi.VHDLTokenType"

  psiImplUtilClass="com.rawatech.psi.impl.VHDLPsiImplUtil"

  tokens = [
          LOWERCASE_RE='regexp:[a-z]*'
          UPPERCASE_RE='regexp:[A-Z]*'
          DIGIT_RE='regexp:[0-9]+'
          WHITE_SPACE = 'regexp:\s+'
          COMMENT = 'regexp:--.*'
          DOT = '.'
          COMMA = ','
          COLON = ':'
          COLONEQUALS = ':='
          SEMICOLON =';'
          PLUS = '+'
          MINUS = '-'
          SPACE = ' '
          AMPERSAND = '&'
          BACKSLASH = '\'
          UNDERLINE = '_'
          HASH = '#'
          QUOTE = "'"
          RARROW = '=>'
          LARROW = '<='
          STARSTAR = '**'
          RELATIONAL_OPERATOR_RE = 'regexp:=|/=|<|<=|>|>='
          EQUALS='='
          SIGN_RE = 'regexp:[+\-]'
          MULTIPLYING_OPERATOR_RE='regexp:\*|/|mod|rem'
          RANGE_RE='<>'
          PIPE='|'
          DQUOTE='"'
          PARLEFT='('
          PARRIGHT=')'
          SPECIAL_RE='regexp:[!@#$%^&*()\[\]+]*'
      ]
}


//---- NAMES ----



VHDLFile ::= design_file



variable_name ::= nameelem
signal_name ::= nameelem
function_name ::= nameelem
entity_name ::= nameelem
architecture_simple_name ::= simple_name
attribute_simple_name ::= simple_name
static_expression ::= expression
architecture_name ::= nameelem
block_statement_label ::= labelelem
generate_statement_label ::= labelelem
block_label ::= labelelem
element_simple_name ::= simple_name
local_generic_clause ::= generic_clause
local_port_clause ::= port_clause
instantiation_label ::= labelelem
component_name ::= nameelem
boolean_expression ::= expression
configuration_simple_name ::= simple_name
element_subtype_indication ::= subtype_indication
time_expression ::= expression
discrete_subtype_indication ::= subtype_indication
architecture_identifier ::= identifier
parameter_association_list ::= association_list
configuration_name ::= nameelem
entity_simple_name ::= simple_name
formal_generic_clause ::= generic_clause
formal_port_clause ::= port_clause
passive_concurrent_procedure_call ::= concurrent_procedure_call
passive_process_statement ::= process_statement
loop_label ::= labelelem
string_expression ::= expression
generic_name ::= nameelem
port_name ::= nameelem
parameter_name ::= nameelem
parameter_interface_list ::= interface_list
generate_label ::= labelelem
generate_parameter_specification ::= parameter_specification
generic_interface_list ::= interface_list
generic_association_list ::= association_list
guarded_signal_list ::= signal_list
package_simple_name ::= simple_name
unit_name ::= nameelem
port_interface_list ::= interface_list
port_association_list ::= association_list
procedure_name ::= nameelem
process_label ::= labelelem
range_attribute_name ::= attribute_name
resolution_function_name ::= nameelem
type_name ::= nameelem
subtype_name ::= nameelem
value_expression ::= expression
loop_parameter_specification ::= parameter_specification




abstract_literal ::=
    decimal_literal | based_literal

access_type_definition ::=
    access subtype_indication

actual_designator ::=
    expression
    | signal_name
    | variable_name
    | open

actual_parameter_part ::=
    parameter_association_list

actual_part ::=
    actual_designator
    | function_name PARLEFT actual_designator PARRIGHT

adding_operator ::=
    PLUS | MINUS | AMPERSAND

aggregate ::=
    PARLEFT element_association ( COMMA element_association )* PARRIGHT

alias_declaration ::=
    alias identifier COLON subtype_indication is nameelem SEMICOLON

allocator ::=
    new subtype_indication
    | new qualified_expression

architecture_body ::=
    architecture identifier of entity_name is
        architecture_declarative_part
    begin
        architecture_statement_part
    end [ architecture_simple_name ] SEMICOLON

architecture_declarative_part ::=
    (block_declarative_item )*

architecture_statement_part ::=
    ( concurrent_statement )*

array_type_definition ::=
    unconstrained_array_definition | constrained_array_definition

assertion_statement ::=
    assert condition
        [ report expression ]
        [ severity expression ] SEMICOLON

association_element ::=
    [ formal_part RARROW ] actual_part

association_list ::=
    association_element ( COMMA association_element )*

attribute_declaration ::=
    attribute identifier COLON type_mark SEMICOLON

attribute_designator ::=
    attribute_simple_name

attribute_name ::=
    prefix QUOTE attribute_designator [ PARLEFT static_expression PARRIGHT ]

attribute_specification ::=
    attribute attribute_designator of entity_specification is expression SEMICOLON

base ::=
    integer

base_specifier ::=
    B | O | X

base_unit_declaration ::=
    identifier SEMICOLON

based_integer ::=
    extended_digit ( [UNDERLINE ] extended_digit )*

based_literal ::=
    base HASH [ based_integer ] [ DOT based_integer ] HASH [ exponent ]

basic_character ::=
    basic_graphic_character | format_effector

basic_graphic_character ::=
    UPPERCASE_RE | DIGIT_RE | SPECIAL_RE | SPACE | QUOTE

binding_indication ::=
    entity_aspect
    [ generic_map_aspect ]
    [ port_map_aspect ]

bit_string_literal ::=
    base_specifier DQUOTE bit_value DQUOTE

bit_value ::=
    extended_digit ( [ UNDERLINE ] extended_digit )*

block_configuration ::=
    for block_specification
        ( use_clause )*
        ( configuration_item )*
    end for SEMICOLON

block_declarative_item ::=
    subprogram_declaration
    | subprogram_body
    | type_declaration
    | subtype_declaration
    | constant_declaration
    | signal_declaration
    | file_declaration
    | alias_declaration
    | component_declaration
    | attribute_declaration
    | attribute_specification
    | configuration_specification
    | disconnection_specification
    | use_clause

block_declarative_part ::=
    (  block_declarative_item  )*

block_header ::=
    [ generic_clause
    [ generic_map_aspect SEMICOLON ] ]
    [ port_clause
    [ port_map_aspect SEMICOLON ] ]

block_specification ::=
    architecture_name
    | block_statement_label
    | generate_statement_label [ PARLEFT index_specification PARRIGHT ]

block_statement ::=
    block_label COLON

        block [ PARLEFT expression PARRIGHT ]
            block_header
            block_declarative_part begin
            block_statement_part end block [ block_label ] SEMICOLON

block_statement_part ::=
    (  concurrent_statement  )*

case_statement ::=
    case expression is
        case_statement_alternative
        (  case_statement_alternative  )*
    end case SEMICOLON

case_statement_alternative ::=
    when choices RARROW
        sequence_of_statements

character_literal ::=
    QUOTE graphic_character QUOTE

choice ::=
    simple_expression
    | discrete_range
    | element_simple_name
    | others

choices ::=
    choice (  PIPE choice  )*

component_configuration ::=
    for component_specification
        [ use binding_indication SEMICOLON ]
        [ block_configuration ]

    end for SEMICOLON

component_declaration ::=
    component identifier
        [ local_generic_clause ]
        [ local_port_clause ]

    end component SEMICOLON

component_instantiation_statement ::=
    instantiation_label COLON
        component_name
            [ generic_map_aspect ]
            [ port_map_aspect ] SEMICOLON

component_specification ::=
    instantiation_list COLON component_name

composite_type_definition ::=
    array_type_definition
    | record_type_definition

concurrent_assertion_statement ::=
    [ labelelem COLON ] assertion_statement

concurrent_procedure_call ::=
    [ labelelem COLON ] procedure_call_statement

concurrent_signal_assignment_statement ::=
    [ labelelem COLON ] conditional_signal_assignment
    | [ labelelem COLON ] selected_signal_assignment

concurrent_statement ::=
    block_statement
    | process_statement
    | concurrent_procedure_call
    | concurrent_assertion_statement
    | concurrent_signal_assignment_statement
    | component_instantiation_statement
    | generate_statement

condition ::=
    boolean_expression

condition_clause ::=
    until condition

conditional_signal_assignment ::=
    target LARROW options conditional_waveforms SEMICOLON

conditional_waveforms ::=
    (  waveform when condition else  )*
    waveform

configuration_declaration ::=
    configuration identifier of entity_name is
        configuration_declarative_part
        block_configuration

    end [ configuration_simple_name ] SEMICOLON

configuration_declarative_item ::=
    use_clause
    | attribute_specification

configuration_declarative_part ::=
    configuration_declarative_item

configuration_item ::=
    block_configuration
    | component_configuration

configuration_specification ::=
    for component_specification use binding_indication SEMICOLON

constant_declaration ::=
    constant identifier_list COLON subtype_indication [ COLONEQUALS expression ] SEMICOLON

constrained_array_definition ::=
    array index_constraint of element_subtype_indication

constraint ::=
    range_constraint
    | index_constraint

context_clause ::=
    context_item*

context_item ::=
    library_clause | use_clause

decimal_literal ::=
    integer [ DOT integer ] [ exponent ]

declaration ::=
    type_declaration
    | subtype_declaration
    | object_declaration
    | file_declaration
    | interface_declaration
    | alias_declaration
    | attribute_declaration
    | component_declaration
    | entity_declaration
    | configuration_declaration
    | subprogram_declaration
    | package_declaration

design_file ::=
    design_unit (  design_unit  )*

design_unit ::=
    context_clause library_unit

designator ::=
    identifier | operator_symbol

direction ::=
    to | downto

disconnection_specification ::=
    disconnect guarded_signal_specification after time_expression SEMICOLON

discrete_range ::=
    discrete_subtype_indication | range

element_association ::=
    [ choices RARROW ] expression

element_declaration ::=
    identifier_list COLON element_subtype_definition SEMICOLON

element_subtype_definition ::=subtype_indication

entity_aspect ::=
    entity entity_name [ PARLEFT architecture_identifier PARRIGHT ]
    | configuration configuration_name
    | open

entity_class ::=
    entity
    | architecture
    | configuration
    | procedure
    | function
    | package
    | type
    | subtype
    | constant
    | signal
    | variable
    | component
    | label

entity_declaration ::=
    entity identifier is
        entity_header
        entity_declarative_part
    [ begin
        entity_statement_part ]
    end [ entity_simple_name ] SEMICOLON

entity_declarative_item ::=
    subprogram_declaration
    | subprogram_body
    | type_declaration
    | subtype_declaration
    | constant_declaration
    | signal_declaration
    | file_declaration
    | alias_declaration
    | attribute_declaration
    | attribute_specification
    | disconnection_specification
    | use_clause

entity_declarative_part ::=
    (  entity_declarative_item  )*

entity_designator ::=
    simple_name | operator_symbol

entity_header ::=
    [ formal_generic_clause ]
    [ formal_port_clause ]

entity_name_list ::=
    entity_designator (  COMMA entity_designator  )*
    | others
    | all

entity_specification ::=
    entity_name_list COLON entity_class

entity_statement ::=
    concurrent_assertion_statement
    | passive_concurrent_procedure_call
    | passive_process_statement

entity_statement_part ::=
    (  entity_statement  )*

enumeration_literal ::=
    identifier | character_literal

enumeration_type_definition ::=
    PARLEFT enumeration_literal (  COMMA enumeration_literal  )* PARRIGHT

exit_statement ::=
    exit [ loop_label ] [ when condition ] SEMICOLON

exponent ::=
    E [ PLUS ] integer | E MINUS integer

expression ::=
    relation (  and relation  )*
    | relation (  or relation  )*
    | relation (  xor relation  )*
    | relation [ nand relation ]
    | relation [ nor relation ]

extended_digit ::=
    digit | letter

factor ::=
    primary [ STARSTAR primary ]
    | abs primary
    | not primary

file_declaration ::=
    file identifier COLON subtype_indication is [ mode ] file_logical_name SEMICOLON

file_logical_name ::=
    string_expression

file_type_definition ::=
    file of type_mark

floating_type_definition ::=
    range_constraint

formal_designator ::=
    generic_name
    | port_name
    | parameter_name

formal_parameter_list ::=
    parameter_interface_list

formal_part ::=
    formal_designator
    | function_name PARLEFT formal_designator PARRIGHT

full_type_declaration ::=
    type identifier is type_definition SEMICOLON

function_call ::=
    function_name [ PARLEFT actual_parameter_part PARRIGHT ]

generate_statement ::=
    generate_label COLON
        generation_scheme generate
            (  concurrent_statement  )* end generate [ generate_label ] SEMICOLON

generation_scheme ::=
    for generate_parameter_specification
    | if condition

generic_clause ::=
    generic PARLEFT generic_list PARRIGHT SEMICOLON

generic_list ::=
    generic_interface_list

generic_map_aspect ::=
    generic map PARLEFT generic_association_list PARRIGHT

graphic_character ::=
    basic_graphic_character | LOWER_CASE_RE

guarded_signal_specification ::=
    guarded_signal_list COLON type_mark

identifier ::= letter ([ UNDERLINE ] letter_or_digit)*

identifier_list ::=
    identifier [(  COMMA identifier  )*]

if_statement ::=
    if condition then
        sequence_of_statements
    { elsif condition then
        sequence_of_statements }
    [ else
        sequence_of_statements ]
    end if SEMICOLON

incomplete_type_declaration ::=
    type identifier SEMICOLON

index_constraint ::=
    PARLEFT discrete_range (  COMMA discrete_range  )* PARRIGHT

index_specification ::=
    discrete_range
    | static_expression

index_subtype_definition ::=
    type_mark range RANGE_RE

indexed_name ::=
    prefix PARLEFT expression (  COMMA expression  )* PARRIGHT

instantiation_list ::=
    instantiation_label ( COMMA instantiation_label )*
    | others
    | all

integer ::=
    DIGIT_RE (  [ UNDERLINE ] DIGIT_RE  )*

integer_type_definition ::=
    range_constraint


interface_declaration ::=
    interface_constant_declaration
    | interface_signal_declaration
    | interface_variable_declaration

interface_element ::=
    interface_declaration

interface_list ::=
    interface_element ( SEMICOLON interface_element )*

interface_constant_declaration ::=
        [ constant ] identifier_list COLON [ in ] subtype_indication [ COLONEQUALS static_expression ]

interface_signal_declaration ::=
    [ signal ] identifier_list COLON [ mode ] subtype_indication [ bus ] [ COLONEQUALS static_expression ]

interface_variable_declaration ::=
    [ variable ] identifier_list COLON [ mode ] subtype_indication [ COLONEQUALS static_expression ]

iteration_scheme ::=
    while condition
    | for loop_parameter_specification

labelelem ::=
    identifier

letter ::=
    UPPERCASE_RE | LOWERCASE_RE

letter_or_digit ::=
    letter | DIGIT_RE

library_clause ::=
    library logical_name_list SEMICOLON


library_unit ::=
    primary_unit
    | secondary_unit

literal ::=
    numeric_literal
    | enumeration_literal
    | string_literal
    | bit_string_literal
    | null

logical_name ::=
    identifier

logical_name_list ::=
    logical_name (COMMA logical_name)*

logical_operator ::=
    and | or | nand | nor | xor

loop_statement ::=
    [ loop_label COLON ]

        [ iteration_scheme ] loop
            sequence_of_statements end loop [ loop_label ] SEMICOLON

miscellaneous_operator ::=
    STARSTAR | abs | not

mode ::=
    in | out | inout | buffer | linkage

multiplying_operator ::= MULTIPLYING_OPERATOR_RE

nameelem ::=
    simple_name
    | operator_symbol
    | selected_name
    | indexed_name
    | slice_name
    | attribute_name

next_statement ::=
    next [ loop_label ] [ when condition ] SEMICOLON

null_statement ::=
    null SEMICOLON

numeric_literal ::=
    abstract_literal
    | physical_literal

object_declaration ::=
    constant_declaration
    | signal_declaration
    | variable_declaration

operator_symbol ::=
    string_literal

options ::=
    [ guarded ] [ transport ]

package_body ::=
    package body package_simple_name is

        package_body_declarative_part

    end [ package_simple_name ] SEMICOLON

package_body_declarative_item ::=
    subprogram_declaration
    | subprogram_body
    | type_declaration
    | subtype_declaration
    | constant_declaration
    | file_declaration
    | alias_declaration
    | use_clause

package_body_declarative_part ::=
    (  package_body_declarative_item  )*

package_declaration ::=
    package identifier is
        package_declarative_part
    end [ package_simple_name ] SEMICOLON

package_declarative_item ::=
    subprogram_declaration
    | type_declaration
    | subtype_declaration
    | constant_declaration
    | signal_declaration
    | file_declaration
    | alias_declaration
    | component_declaration
    | attribute_declaration
    | attribute_specification
    | disconnection_specification
    | use_clause

package_declarative_part ::=
    (  package_declarative_item  )*

parameter_specification ::=
    identifier in discrete_range

physical_literal ::=
    [ abstract_literal ] unit_name

physical_type_definition ::=
    range_constraint
        units
            base_unit_declaration
            (  secondary_unit_declaration  )* end units

port_clause ::=
    port PARLEFT port_list PARRIGHT SEMICOLON

port_list ::=
    port_interface_list

port_map_aspect ::=
    port map PARLEFT port_association_list PARRIGHT

prefix ::=
    nameelem
    | function_call

primary ::=
    nameelem
    | literal
    | aggregate
    | function_call
    | qualified_expression
    | type_conversion
    | allocator
    | PARLEFT expression PARRIGHT

primary_unit ::=
    entity_declaration
    | configuration_declaration
    | package_declaration

procedure_call_statement ::=
    procedure_name [ PARLEFT actual_parameter_part PARRIGHT ] SEMICOLON

process_declarative_item ::=
    subprogram_declaration
    | subprogram_body
    | type_declaration
    | subtype_declaration
    | constant_declaration
    | variable_declaration
    | file_declaration
    | alias_declaration
    | attribute_declaration
    | attribute_specification
    | use_clause

process_declarative_part ::=
    (  process_declarative_item  )*

process_statement ::=
    [ process_label COLON ]
        process [ PARLEFT sensitivity_list PARRIGHT ]
            process_declarative_part begin
            process_statement_part end process [ process_label ] SEMICOLON

process_statement_part ::=
    (  sequential_statement  )*

qualified_expression ::=
    type_mark QUOTE PARLEFT expression PARRIGHT
    | type_mark QUOTE aggregate

range ::=
    range_attribute_name
    | simple_expression direction simple_expression

range_constraint ::=
    range range

record_type_definition ::=
    record
        element_declaration
        (  element_declaration  )*
    end record

relation ::=
    simple_expression [ relational_operator simple_expression ]

relational_operator ::= RELATIONAL_OPERATOR_RE

return_statement ::=
    return [ expression ] SEMICOLON

scalar_type_definition ::=
    enumeration_type_definition
    | integer_type_definition
    | floating_type_definition
    | physical_type_definition

secondary_unit ::=
    architecture_body
    | package_body

secondary_unit_declaration ::=
    identifier EQUALS physical_literal SEMICOLON

selected_name ::=
    (prefix DOT)* suffix

selected_signal_assignment ::=
    with expression select
        target LARROW options selected_waveforms SEMICOLON

selected_waveforms ::=
    (  waveform when choices COMMA  )*
    waveform when choices

sensitivity_clause ::=
    on sensitivity_list

sensitivity_list ::=
    signal_name (  COMMA signal_name  )*

sequence_of_statements ::=
    (  sequential_statement  )*

sequential_statement ::=
    wait_statement
    | assertion_statement
    | signal_assignment_statement
    | variable_assignment_statement
    | procedure_call_statement
    | if_statement
    | case_statement
    | loop_statement
    | next_statement
    | exit_statement
    | return_statement
    | null_statement

sign ::= SIGN_RE

signal_assignment_statement ::=
    target LARROW [ transport ] waveform SEMICOLON

signal_declaration ::=
    signal identifier_list COLON subtype_indication [ signal_kind ] [ COLONEQUALS expression ] SEMICOLON

signal_kind ::=
    register | bus

signal_list ::=
    signal_name ( COMMA signal_name )*
    | others
    | all

simple_expression ::=
    [ sign ] term ( adding_operator term)*


simple_name ::=
    identifier

slice_name ::=
    prefix PARLEFT discrete_range PARRIGHT

string_literal ::=
    DQUOTE graphic_character* DQUOTE

subprogram_body ::=
    subprogram_specification is
        subprogram_declarative_part
    begin
        subprogram_statement_part
    end [ designator ] SEMICOLON

subprogram_declaration ::=
    subprogram_specification SEMICOLON

subprogram_declarative_item ::=
    subprogram_declaration
    | subprogram_body
    | type_declaration
    | subtype_declaration
    | constant_declaration
    | variable_declaration
    | file_declaration
    | alias_declaration
    | attribute_declaration
    | attribute_specification
    | use_clause

subprogram_declarative_part ::=
    (  subprogram_declarative_item  )*

subprogram_specification ::=
    procedure designator [ PARLEFT formal_parameter_list PARRIGHT ]
    | function designator [ PARLEFT formal_parameter_list PARRIGHT ] return type_mark

subprogram_statement_part ::=
    (  sequential_statement  )*

subtype_declaration ::=
    subtype identifier is subtype_indication SEMICOLON

subtype_indication ::=
//    [ resolution_function_name ] type_mark [ constraint ]
    type_mark [ constraint ]

suffix ::=
    simple_name
    | character_literal
    | operator_symbol
    | all

target ::=
    nameelem
    | aggregate

term ::=
    factor (  multiplying_operator factor  )*

timeout_clause ::=
    for time_expression

type_conversion ::=
    type_mark PARLEFT expression PARRIGHT

type_declaration ::=
    full_type_declaration
    | incomplete_type_declaration

type_definition ::=
    scalar_type_definition
    | composite_type_definition
    | access_type_definition
    | file_type_definition

type_mark ::=
    type_name
    | subtype_name

unconstrained_array_definition ::=
    array PARLEFT index_subtype_definition (  COMMA index_subtype_definition  )* PARRIGHT
        of element_subtype_indication

use_clause ::=
    use selected_name [ (  COMMA selected_name  )* ] SEMICOLON

variable_assignment_statement ::=
    target COLONEQUALS expression SEMICOLON

variable_declaration ::=
    variable identifier_list COLON subtype_indication [ COLONEQUALS expression ] SEMICOLON

wait_statement ::=
    wait [ sensitivity_clause ] [ condition_clause ] [ timeout_clause ] SEMICOLON

waveform ::=
    waveform_element (  COMMA waveform_element  )*

waveform_element ::=
    value_expression [ after time_expression ]
    | null [ after time_expression ]